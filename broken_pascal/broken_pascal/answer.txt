※これは解答用テキストファイルです。

■解答を記入してください。未記入の場合は大幅な減点となります。
case01.in.txt
5 3
case02.in.txt
22 18
case03.in.txt
7 4
case04.in.txt
33 2
case05.in.txt
46 39
の、5つの入力に対する出力結果を記入してください（各ケースごとに改行してください）。

■使用言語・動作環境について
(1)言語の種類を記入してください。未記入の場合、減点となります。
ruby


(2)コンパイラ／インタプリタの名称・バージョン情報を記入してください。未記入の場合、減点となります。
ruby 2.0.0


■プログラムの特長・工夫した点等、アピールポイントについて。
あなたが書いたコードの内容や工夫した点をわかりやすく説明してください。
未記入の場合や「特になし」のような記述は、大幅な減点となります。

実際のパスカルの三角形と違う値を持っている部分の左端と右端をはじめに取り出します。
次の入力の場合
7
1 6 13 14 9 4 1

正しいパスカルの三角形では
1 6 15 20 15 6 1
なので
3番目から6番目までが間違っていることになります。
そして3番目から6番目が底辺になるように三角形を作ると計算を間違えた場所がわかります。
間違えた座標の段数は入力の段数7から右側の6を引き、左端の3を足すことによって求められ、
何個めが間違っているかは左端の値と同じであることがわかります。

そのようにプログラムを実装し答えを得ました。

■もし企業からのスカウトメールがきたらどのくらい積極的にアクションすると思いますか？任意でお答えください。
「積極的に会ってみたいと思う」「社名や条件次第では会ってみたいと思う」「よほどのことがない限り返信しない」、他ありましたら記入してください。
社名や条件次第では会ってみたいと思う


■あなたが書いたコードを貼り付けてください。未記入の場合は評価できません。
コードが完全な形（そのままコンパイル・実行）できるものでない場合は程度に応じて減点の対象となります。

n = gets.to_i #段数
pascal = gets.split.map(&:to_i)	#間違ったパスカルの三角形の一行を配列で読む

c = 1	#正しいパスカルの三角形の値を格納

left = 0
right = 0

n.times{|i|
	if ((left == 0) and (pascal[i] != c)) then		#間違っている箇所の左端を探す
			left = i+1
	end
	if left != 0 and pascal[i] == c then		#間違っている箇所の右端を探す
			right = i
			break
	end
	
	c *= n - 1 - i		#正しいパスカルの三角形の次の値を求める
	c /= i + 1			#求めるべき値は n段k個めの時　(n-1)Ck　であることを利用
}

print (n-right+left).to_s() +" "+ left.to_s()


